#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "concatmatlrc.hpp"
#include "doctest.h"
#include <Eigen/Dense>
#include <iomanip>
#include <random>

struct TestData {
  TestData() {
    A1.resize(8, 3);
    A2.resize(8, 3);
    B1.resize(7, 3);
    B2.resize(7, 3);
    U.resize(8, 6);
    V.resize(14, 6);
    sigma.resize(6);
    A1 << 0.13162146468256664, -0.94933163092906192, -0.46202307914477914,
        0.22185983565722589, -0.36748081136843225, -0.81532354085488412,
        0.011536157229699251, -0.87744761345789191, 0.7619264050209551,
        -0.64070625120806801, -0.8326819640736477, 0.1251463262015704,
        0.63337254786555319, 0.9535818407095884, 0.32702781694337157,
        -0.63305669167687029, 0.95611657013935814, 0.9628818565806756,
        0.16930592393935928, 0.74777800671187133, 0.92382089417605706,
        -0.15568784678154057, -0.89384638047490572, -0.72110597310639268;
    A2 << -0.55311551483027421, -0.70591615219875992, 0.95631444824687883,
        -0.57116578871904211, -0.87527021387371706, -0.10567906457263931,
        -0.97602821140365126, -0.84551066525537089, -0.29034050055329708,
        0.73678111645243183, 0.92745639566679317, 0.90989628802514466,
        -0.33642587779854694, -0.50832690555058746, -0.14956249536460386,
        0.072224012144014305, 0.32379525868398851, -0.54256249477274832,
        0.11319362889658358, -0.22823145111474741, -0.98395009338108363,
        0.7951955868840197, -0.45765853647964938, 0.38841442642193957;
    B1 << -0.35788603469630986, -0.8122573484723723, 0.32498556530335243,
        0.77797631163987169, -0.13378414378212022, 0.63831545768227227,
        -0.4864392483078126, -0.7279924031943048, 0.16244718300292593,
        0.96914178224706182, 0.92452376798005953, 0.47947490097930423,
        0.74085816728922449, 0.5297899793506553, 0.56577185241774286,
        -0.56261835506307811, 0.34423160988103207, 0.65412027745233869,
        -0.75196419179065344, 0.037717396876643106, -0.19672984126802995;
    B2 << -0.66245959962832723, 0.36355874564664381, -0.79563472131063917,
        -0.80353825995863337, -0.31446919930841266, -0.57834433744584413,
        -0.24041539395247369, 0.47071326685636916, -0.77714970045590293,
        0.23186133579903334, -0.99432728998098863, -0.60789206978301147,
        -0.093878760511930448, -0.53649288859986366, 0.28787151877203554,
        -0.33051910685865171, 0.98427401854855656, -0.50514210271888516,
        -0.91770115956557041, 0.97481449226607308, -0.68336830180295194;
    U << -0.36781337175384449, -0.35703297124101729, 0.07439865819598844,
        -0.28941526082179209, 0.3358620861819952, 0.45194036381148128,
        -0.10651159482001757, -0.47915841370272366, -0.040461083040089788,
        0.48118023641128377, -0.21826066046617212, 0.21390212720443005,
        0.0050414509791294627, -0.41941146929890577, -0.76696540271413038,
        -0.30420583334654738, 0.14033084720005706, -0.10498238656414362,
        -0.44920827373367511, 0.51180595970402354, -0.12428241893208677,
        -0.35649554294989394, 0.14645922657846397, -0.014974455572015738,
        0.38351077287412605, -0.26118369502234368, 0.51064094195170251,
        -0.43203829678986949, 0.2573507113544794, 0.15835078014389248,
        0.28954798479433153, 0.27223365217251988, -0.2442582526022877,
        -0.16058802899444127, -0.43401564644168716, 0.7514677060652416,
        0.42074378215565605, -0.10044758013838923, -0.069538385940339828,
        -0.38411737216489122, -0.32143199180524945, -0.36703780220568366,
        -0.49356988935467766, -0.2294897618202287, 0.25277230687116403,
        -0.32416410220312325, -0.66370053193120038, -0.11939355362779082;
    V << -0.25882824846688834, -0.0059083199178394802, -0.46465180507573556,
        -0.3245963690402015, 0.098316895372690297, -0.18439325637346654,
        0.16004459070493232, -0.11001637820782922, -0.12937418018825034,
        -0.40788111488750395, 0.32559077447053208, -0.38316401874641076,
        -0.27522479321951421, 0.014071507039328232, -0.40065152111815627,
        -0.21132985923899703, 0.026918301001810217, -0.096619985364848657,
        0.54000104156703554, 0.011197273993531529, 0.30671922875859736,
        -0.19839707893782732, 0.094007509353748686, 0.014929104808910125,
        0.39299808799643371, 0.0096873628184722671, 0.098096055641623631,
        -0.30881508419431525, 0.1218207121210587, -0.054849446193742074,
        0.24572384541084152, 0.31504851501552722, -0.28552166839413134,
        -0.49234687366575575, -0.31073522266438791, 0.4975480351846302,
        -0.089036241017678847, 0.16083617697552074, -0.075127214847440796,
        0.083862131016418137, -0.29007703620143821, 0.36511697475205612,
        0.28001473879410493, -0.080688663368726626, -0.32207115442274298,
        0.25241788448263752, -0.010725832718002898, -0.028940895923538226,
        0.23744825116436241, -0.50651250921828805, -0.34647185380088336,
        0.19429371980105842, 0.18703637063827649, 0.31370395923809508,
        0.23497093820306175, 0.13469862304248953, -0.19399802501946584,
        0.17998341454393529, -0.30167853562319974, -0.32296997986508746,
        0.15431470667960967, -0.52215552978293189, -0.078544008692847611,
        -0.055401075039569495, -0.64540737681193527, -0.2485545868115126,
        -0.067542938984418086, -0.32341058244903387, 0.0068726375276077223,
        -0.063394106087793139, 0.2199896501406669, 0.31674502401020799,
        0.16417737340802258, 0.41256474344651134, -0.15256359223426963,
        0.2081088753393838, -0.017903749148567988, -0.23511697310621038,
        0.26825014917451179, 0.18346837136734684, -0.35365701659623189,
        0.33939234296762955, 0.29638964008921231, 0.069347720859361958;
    sigma << 5.6533634472815075, 3.2322134868533081, 2.2416142338459255,
        1.3181089710112575, 1.0478935292491232, 0.62536003531025486;
  }
  Eigen::MatrixXd A1;
  Eigen::MatrixXd A2;
  Eigen::MatrixXd B1;
  Eigen::MatrixXd B2;
  Eigen::MatrixXd U;
  Eigen::MatrixXd V;
  Eigen::VectorXd sigma;
};

TestData data;

TEST_SUITE("Low-rank approximation of concatenated matrices") {

  TEST_CASE("eco_svd_concat()" *
            doctest::description(
                "Testing output assuming the matrices are ordered based on "
                "descending singular values. Not testing efficiency")) {
    // Calling the function to be tested
    unsigned m{8},n{7},k{3};
    Eigen::VectorXd sigma;
    Eigen::MatrixXd U, V;
    std::tie(U, sigma, V) = eco_svd_concat(data.A1, data.B1, data.A2, data.B2);

    // Size checks for the output
    REQUIRE(U.rows() == m);
    REQUIRE(U.cols() == 2 * k);
    REQUIRE(V.rows() == 2 * n);
    REQUIRE(V.cols() == 2 * k);
    REQUIRE(sigma.size() == 2 * k);

    CHECK(abs(U.norm()-data.U.norm()) == doctest::Approx(0.).epsilon(1e-10));
    CHECK(abs(V.norm()-data.V.norm()) == doctest::Approx(0.).epsilon(1e-10));
    CHECK((sigma-data.sigma).norm() == doctest::Approx(0.).epsilon(1e-10));
  }

  TEST_CASE("test_eco_svd_concat()" *
            doctest::description("Function not tested") * doctest::skip()) {}

  TEST_CASE("concat_low_rank_best()" *
            doctest::description("Testing correct sizes and norm, not checking "
                                 "if the best approximation is returned")) {
    // Generating random matrices for test
    unsigned k(3), m(7), n(6);
    Eigen::MatrixXd A1 = Eigen::MatrixXd::Random(m, k);
    Eigen::MatrixXd A2 = Eigen::MatrixXd::Random(m, k);
    Eigen::MatrixXd B1 = Eigen::MatrixXd::Random(n, k);
    Eigen::MatrixXd B2 = Eigen::MatrixXd::Random(n, k);

    // Calling the function to be implemented
    double tol = 1e-5;
    Eigen::MatrixXd A_M, B_M;
    std::tie(A_M, B_M) = concat_low_rank_best(A1, B1, A2, B2, tol);
    Eigen::MatrixXd M = A_M * B_M.transpose();

    // Size checks for the output
    REQUIRE(A_M.rows() == m);
    REQUIRE(B_M.rows() == 2 * n);
    REQUIRE(A_M.cols() == B_M.cols());

    // Computing SVD via Eigen for reference
    Eigen::MatrixXd X(m, 2 * n);
    X << A1 * B1.transpose(), A2 * B2.transpose();

    // Norm check
    CHECK((X - M).norm() / X.norm() <= tol);
  }
}
