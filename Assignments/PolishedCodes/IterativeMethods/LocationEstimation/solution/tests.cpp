#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"
#include "locationestimation.hpp"
#include <utility>

// includes for test data
#include <Eigen/Dense>

struct TestData {
  TestData() {
    l1.resize(3, 10);
    t1.resize(10);
    p1.resize(3);

    l2.resize(3, 15);
    t2.resize(15);
    p2.resize(3);

    l1 << 0.68037543430941905, 0.59688006695214657, -0.32955448857022196,
        0.10793991159086103, -0.27043105441631332, 0.8323901360074013,
        -0.7167948892883933, -0.51422645874052608, -0.68664182149183084,
        -0.78238239594846148, -0.21123414636181392, 0.82329471587356862,
        0.53645918962380801, -0.045205896275679502, 0.026801820391231024,
        0.27142345591980188, 0.21393775251411729, -0.72553684642796257,
        -0.198111211507633, 0.99784903600711794, 0.56619844751721171,
        -0.60489726141323208, -0.44445057839362445, 0.25774184952384882,
        0.90445945034942565, 0.43459385886536617, -0.96739885675134085,
        0.60835350845398084, -0.74041910643708853, -0.56348618937818618;
    t1 << 0.025864788808796835, 0.67822446938521441, 0.22527966519132248,
        -0.40793676460531392, 0.27510453540603841, 0.048574380133568518,
        -0.012834026018545996, 0.94555004776713902, -0.41496643117394594,
        0.54271539558782966;
    p1 << 0.10320346391864181, -0.29253593049560145, -0.42544455547668691;
    ts1 = -0.96304884223029019;

    l2 << 0.99899699911428486, -0.079555904064120719, -0.94233212710466796,
        0.30997086563611909, 0.1639772360976679, -0.217049046054971,
        -0.69257032018740206, 0.39639141941275047, -0.7169080561571326,
        -0.70018736631618217, 0.039780632145600681, 0.47147635345881644,
        -0.39618590911672724, -0.90293819918434048, 0.55806334668680257,
        -0.47337019046459816, -0.89408564469501639, 0.20499972310150039,
        -0.80098141534299661, -0.62866757979088816, -0.0077458354680546293,
        -0.57821896186946842, -0.45120060883984003, 0.26632699988145703,
        0.40740421014251393, 0.40640120832547599, -0.6731546966699673,
        -0.61548682377463526, 0.69448404279280651, -0.14153872204084816,
        -0.56830427868678435, 0.13233773835577889, 0.49324770993238665,
        0.46100154587114295, 0.67899075601202941, 0.29707595952650334,
        0.90409354954217269, -0.75401219155360577, 0.70024037440318643,
        0.58116288836168262, -0.89220730210291566, -0.78629294679793205,
        0.41870677630356834, 0.61772536096057173, 0.98905778210100626;
    t2 << 0.23705410176750918, 0.64141223190418084, -0.01868805429837106,
        -0.46586993963730983, 0.94884191171677879, 0.40309298383216041,
        -0.56177639102645982, 0.34523333112952925, 0.95189237499232049,
        -0.31578858258006559, 0.62832527497239665, 0.21821937394245494,
        -0.61554820910820185, 0.92813790865621426, -0.37437641591503112;
    p2 << 0.35479516849545617, -0.036598834467770451, 0.40496478059301322;
    ts2 = -0.88519832188538194;
  }

  Eigen::MatrixXd l1;
  Eigen::VectorXd t1;
  Eigen::VectorXd p1;
  double ts1;

  Eigen::MatrixXd l2;
  Eigen::VectorXd t2;
  Eigen::VectorXd p2;
  double ts2;
};

TestData data;

TEST_SUITE("Non linear least squares location estimation") {

  TEST_CASE("source_estimation()" * doctest::description("Testing output")) {
    Eigen::Vector3d p1, p2;
    double ts1, ts2;

    std::tie(p1, ts1) = source_estimation(data.l1, data.t1);
    std::tie(p2, ts2) = source_estimation(data.l2, data.t2);

    CHECK((p1 - data.p1).norm() == doctest::Approx(0.).epsilon(1e-6));
    CHECK((p2 - data.p2).norm() == doctest::Approx(0.).epsilon(1e-6));
  }
}
