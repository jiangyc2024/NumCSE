#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"
#include "helper_functions.hpp"
#include <cmath>
#include <iomanip>
#include <utility>

// includes for test data
#include <Eigen/Dense>

struct TestData {
  TestData() {
    m = 10;
    n = 5;
    m1 = 23;
    n1 = 15;
    X.resize(n);
    F.resize(n);
    res.resize(m);
    X1.resize(n1);
    F1.resize(n1);
    res1.resize(m1);
    DF.resize(n, n);
    DF1.resize(n1, n1);
    X << 0.680375434309419, -0.211234146361814, 0.566198447517212,
        0.596880066952147, 0.823294715873569;
    res << 2.45551451829053, -0.166057138230724, -0.0714377321227189,
        1.02488438544934, 0.544619058751001, 1.68422267710987,
        0.544619058751001, 1.02488438544934, -0.0714377321227189,
        -0.166057138230724;
    X1 << -0.604897261413232, -0.329554488570222, 0.536459189623808,
        -0.444450578393624, 0.107939911590861, -0.0452058962756795,
        0.257741849523849, -0.270431054416313, 0.026801820391231,
        0.904459450349426, 0.832390136007401, 0.271423455919802,
        0.434593858865366, -0.716794889288393, 0.213937752514117;
    res1 << 1.1744132564284, -2.34227220292217, 0.301618645564445,
        -0.927101429436866, -0.950657953705945, -0.110427238333774,
        -1.67587212530749, -1.68642320123174, 0.344262558756342,
        -1.94465218567373, 0.729883500062989, 0.718116497761573,
        0.718116497761575, 0.729883500062989, -1.94465218567373,
        0.344262558756342, -1.68642320123174, -1.67587212530749,
        -0.110427238333775, -0.950657953705944, -0.927101429436867,
        0.301618645564446, -2.34227220292217;
    F << 827.989823119552, -86.3713454162012, -321.598407384563,
        -321.598407384563, -86.3713454162012;
    F1 << 6668.47701009983, -4890.28846253823, -2648.3052303097,
        7475.95405976912, 1818.39509967697, 5022.59148804758, -2707.52816376484,
        -7423.10563626783, -7423.10563626783, -2707.52816376484,
        5022.59148804758, 1818.39509967697, 7475.95405976912, -2648.3052303097,
        -4890.28846253823;
    DF << 18.0886546486068, 57.5670722529642, 176.002325066036,
        373.394413087824, 649.743336318326, 0.0153100487125123,
        12.2042330160144, -127.767229101418, -287.4607828662, 195.196762277677,
        0.889829757464478, -32.6585981488456, 49.0729803202672,
        110.070490074155, -511.73925944319, 0.889829757464478,
        -32.6585981488456, 49.0729803202673, 110.070490074155,
        -511.739259443189, 0.0153100487125123, 12.2042330160144,
        -127.767229101418, -287.460782866199, 195.196762277678;
    DF1 << 4.13773949062426, 43.6161570949817, 162.051409908054,
        359.443497929841, 635.792421160343, 991.09817959956, 1425.36077324749,
        1938.58020210414, 2530.7564661695, 3201.88956544358, 3951.97949992637,
        4781.02626961787, 5689.02987451809, 6675.99031462703, 7741.90758994468,
        11.6357754178849, 46.6951388565366, 113.450723499592, 113.391169903855,
        -67.2421629141135, -499.29810776341, -1159.20712716222,
        -1903.55175937068, -2482.78755127773, -2596.44911104526,
        -1979.73876792682, -500.537086978444, 1760.32393325882,
        4472.12661259875, 7079.43430894533, 4.94232780662998, 29.7232803117665,
        -17.0230872282806, -291.446823963942, -622.685837453606,
        -495.951383957783, 440.709333512012, 1771.71616590947, 2312.69610207015,
        989.686921297003, -1976.39204412118, -4677.3363808029,
        -4603.17277561304, -697.915110757944, 5180.88569470168,
        2.84543318302554, 13.0787891606908, -130.056846813251,
        -289.750400578032, 196.071318422354, 989.805873291961, 440.061357437905,
        -1567.29883069628, -2046.37949199063, 989.038945222893,
        3950.68719361877, 1477.019023254, -4601.47635222713, -5399.94412105104,
        2391.98166956231, 7.39234332082211, -4.89932861169459,
        -161.693680724941, 112.079877271386, 583.798506900127,
        -497.176391714878, -1155.77411848123, 1299.34110114358,
        1695.58436378896, -2593.01610236426, -1977.61705187829,
        4370.65806002485, 1759.01264062636, -6533.2873917024, -809.589901874041,
        0.164217951470333, -19.8213177779139, -79.0389441844501,
        355.469976390687, -315.909449810594, -493.562329030204,
        1421.38725170834, -967.30334028249, -1263.39147231518, 3197.91604390442,
        -1974.0029891936, -2388.52637403937, 5685.05635297894,
        -3336.00839654392, -3868.96703420278, 3.66564387636669,
        -34.9042789442634, 49.9307540562339, 110.928263810122,
        -513.984940238607, 990.626083985303, -1152.75915529773,
        598.908341841222, 781.900871102889, -2590.00113918077, 3951.50740431211,
        -3867.54956929901, 1757.86102716508, 2062.84857593454,
        -6262.95287577074, 0.488969447024803, -39.0940037519089,
        144.708012126769, -287.843981368979, 422.986664577649,
        -493.724704777981, 439.333170096852, -202.255409121571, -264.1546839879,
        988.310757881845, -1974.16536494138, 3196.68950309529,
        -4599.56993301808, 6095.48730989421, -7569.15929854345,
        0.488969447024803, -39.0940037519089, 144.708012126769,
        -287.84398136898, 422.98666457765, -493.724704777982, 439.333170096854,
        -202.255409121575, -264.154683987895, 988.310757881838,
        -1974.16536494137, 3196.68950309528, -4599.56993301807, 6095.4873098942,
        -7569.15929854344, 3.66564387636669, -34.9042789442634, 49.930754056234,
        110.928263810122, -513.984940238607, 990.626083985303,
        -1152.75915529773, 598.908341841225, 781.900871102884,
        -2590.00113918076, 3951.50740431211, -3867.54956929902, 1757.8610271651,
        2062.84857593452, -6262.95287577072, 0.164217951470333,
        -19.8213177779139, -79.0389441844499, 355.469976390687,
        -315.909449810596, -493.5623290302, 1421.38725170834, -967.303340282496,
        -1263.39147231516, 3197.91604390442, -1974.00298919363,
        -2388.52637403934, 5685.05635297894, -3336.00839654398,
        -3868.96703420273, 7.39234332082211, -4.89932861169463,
        -161.69368072494, 112.079877271387, 583.798506900126, -497.176391714884,
        -1155.77411848122, 1299.34110114358, 1695.58436378894,
        -2593.01610236427, -1977.61705187824, 4370.65806002487, 1759.0126406263,
        -6533.28739170242, -809.58990187396, 2.84543318302554, 13.0787891606908,
        -130.056846813251, -289.750400578032, 196.071318422354,
        989.805873291961, 440.061357437903, -1567.29883069628,
        -2046.37949199062, 989.0389452229, 3950.68719361877, 1477.01902325399,
        -4601.47635222714, -5399.94412105102, 2391.98166956233,
        4.94232780662998, 29.7232803117665, -17.0230872282805,
        -291.446823963942, -622.685837453607, -495.951383957786,
        440.709333512014, 1771.71616590947, 2312.69610207015, 989.686921297018,
        -1976.39204412116, -4677.3363808029, -4603.17277561303,
        -697.915110757934, 5180.88569470168, 11.6357754178849, 46.6951388565366,
        113.450723499593, 113.391169903854, -67.2421629141134,
        -499.298107763409, -1159.20712716223, -1903.55175937068,
        -2482.78755127773, -2596.44911104525, -1979.73876792682,
        -500.537086978474, 1760.32393325884, 4472.12661259875, 7079.43430894531;
  }
  Eigen::VectorXd X, X1, uN, uN1, F, F1, res, res1;
  Eigen::MatrixXd DF, DF1;
  unsigned m, n, m1, n1;
};

TestData data;

TEST_SUITE("PeriodicCollocation") {

  TEST_CASE("eval_uN()" *
            doctest::description("Testing output, not efficiency")) {
    // Comparing result with solution
    Eigen::VectorXd res = eval_uN(data.X, data.m);
    CHECK((res - data.res).norm() == doctest::Approx(0).epsilon(1e-10));

    Eigen::VectorXd res1 = eval_uN(data.X1, data.m1);
    CHECK((res1 - data.res1).norm() == doctest::Approx(0).epsilon(1e-10));
  }

  TEST_CASE("eval_F()" * doctest::description("Testing output")) {
    // Comparing result with solution
    Eigen::VectorXd res = eval_F(data.X);
    CHECK((res - data.F).norm() == doctest::Approx(0).epsilon(1e-10));

    Eigen::VectorXd res1 = eval_F(data.X1);
    CHECK((res1 - data.F1).norm() == doctest::Approx(0).epsilon(1e-10));
  }

  TEST_CASE("eval_DF()" * doctest::description("Testing output")) {
    // Comparing result with solution
    Eigen::MatrixXd res = eval_DF(data.X);
    CHECK((res - data.DF).norm() == doctest::Approx(0).epsilon(1e-10));

    Eigen::MatrixXd res1 = eval_DF(data.X1);
    CHECK((res1 - data.DF1).norm() == doctest::Approx(0).epsilon(1e-10));
  }
}
